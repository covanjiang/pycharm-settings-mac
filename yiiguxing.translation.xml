<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="786" />
    <option name="newTranslationDialogY" value="484" />
    <histories>
      <item value="Content" />
      <item value="supplementary" />
      <item value="compensation" />
      <item value="discrepancies" />
      <item value="There are discrepancies in media consumption, please check your email!" />
      <item value="Media consumption indistinguishable data!" />
      <item value="preamble" />
      <item value="transpose" />
      <item value="embedding" />
      <item value="When the timeout argument is not present or None, the operation will block until the thread terminates. A thread can be join()ed many times. join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception." />
      <item value="hen the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call isAlive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out." />
      <item value="This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs." />
      <item value="statements" />
      <item value="Normally, THttpServer always sends a 200 response. If a handler wants to override this behavior (e.g., to simulate a misconfigured or overloaded web server during testing), it can raise a ResponseException. The function passed to the constructor will be called with the RequestHandler as its only argument. Note that this is irrelevant for ONEWAY requests, as the HTTP response must be sent before the RPC is processed." />
      <item value="propagate" />
      <item value="income" />
      <item value="Domestic" />
      <item value="stats latency" />
      <item value="latency" />
      <item value="accuracy" />
      <item value="A toolset for quality control, evlation and processing of GRID-seq libarary." />
      <item value="known case of datetime.datetime.utcnow &quot;&quot;&quot; Return a new datetime representing UTC day and time." />
      <item value="Unexpected argument&#10;" />
      <item value="Unexpected argument" />
      <item value="The delimiter according which to split the string. None (the default value) means split according to any whitespace, and discard empty strings from the result. maxsplit&#10;" />
      <item value="The delimiter according which to split the string. None (the default value) means split according to any whitespace, and discard empty strings from the result. maxsplit" />
      <item value="Returns the approximate memory footprint an object and all of its contents. Automatically finds the contents of the following builtin containers and their subclasses: tuple, list, deque, dict, set and frozenset. To search other containers, add handlers to iterate over their contents: handlers = {SomeContainerClass: iter, OtherContainerClass: OtherContainerClass.get_elements}" />
      <item value="verbose" />
      <item value="so slow" />
      <item value="Get polyA peaks for given set of depths" />
      <item value="fusion reads" />
      <item value="sorted ids of intervals in cluster(tuples)" />
      <item value="Cluster reads into positive strand and negative strand" />
      <item value="minimal reads to support APAspeaks" />
      <item value="minimal distance between two adjacent APAspeaks" />
      <item value="Shadows name 'split_unit' from outer scope" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="32" />
        <entry key="ENGLISH" value="33" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657510488418" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1712906713939" />
  </component>
  <component name="Translation.Settings">
    <option name="keepFormat" value="true" />
    <option name="primaryLanguage" value="CHINESE" />
    <option name="translator" value="GOOGLE" />
  </component>
  <component name="Translation.States">
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="The method to use for early stopping if the agent never&#10;    returns `AgentFinish`. Either 'force' or 'generate'." />
      <item value="The agent to run for creating a plan and determining actions&#10;    to take at each step of the execution loop." />
      <item value="How to handle errors raised by the agent's output parser.&#10;    Defaults to `False`, which raises the error.&#10;    If `true`, the error will be sent back to the LLM as an observation.&#10;    If a string, the string itself will be sent to the LLM as an observation.&#10;    If a callable function, the function will be called with the exception&#10;     as an argument, and the result of that function will be passed to the agent&#10;      as an observation." />
      <item value="`&quot;generate&quot;` calls the agent's LLM Chain one final time to generate&#10;        a final answer based on the previous steps." />
      <item value="`&quot;force&quot;` returns a string saying that it stopped because it met a&#10;        time or iteration limit." />
      <item value="The maximum amount of wall clock time to spend in the execution&#10;    loop." />
      <item value="The maximum number of steps to take before ending the execution&#10;    loop.&#10;    &#10;    Setting to 'None' could lead to an infinite loop." />
      <item value="Whether to return the agent's trajectory of intermediate steps&#10;    at the end in addition to the final output." />
      <item value="Parses a message into agent actionsfinish.&#10;&#10;    Is meant to be used with OpenAI models, as it relies on the specific&#10;    tool_calls parameter from OpenAI to convey what tools to use.&#10;&#10;    If a tool_calls parameter is passed, then that is used to get&#10;    the tool names and tool inputs.&#10;&#10;    If one is not passed, then the AIMessage is assumed to be the final output." />
      <item value="EUCLIDEAN" />
      <item value="Enumerator of the Distance strategies." />
      <item value="If True, Python zero-based indexes should be interpreted as one-based&#10;    on the SQL expression side." />
      <item value="The above type represents an N-dimensional array,&#10;    meaning a supporting backend such as PostgreSQL will interpret values&#10;    with any number of dimensions automatically.   To produce an INSERT&#10;    construct that passes in a 1-dimensional array of integers::" />
      <item value=":class:`_types.ARRAY` is part of the Core in support of various SQL&#10;    standard functions such as :class:`_functions.array_agg`&#10;    which explicitly involve&#10;    arrays; however, with the exception of the PostgreSQL backend and possibly&#10;    some third-party dialects, no other SQLAlchemy built-in dialect has support&#10;    for this type." />
      <item value="This type serves as the basis for all ARRAY operations.&#10;       However, currently only the PostgreSQL backend has support for SQL&#10;       arrays in SQLAlchemy. It is recommended to use the PostgreSQL-specific&#10;       :class:`sqlalchemy.dialects.postgresql.ARRAY` type directly when using&#10;       ARRAY types with PostgreSQL, as it provides additional operators&#10;       specific to that backend." />
      <item value="Represent a SQL Array type." />
      <item value="search for shopping knowledge" />
      <item value="Timeout for requests to OpenAI completion API. Can be float, httpx.Timeout or &#10;        None." />
      <item value="to support explicit proxy for OpenAI" />
      <item value="商品导购" />
      <item value="Searches for products matching the keyword or item detail page link, with an emphasis on products offering coupons." />
      <item value="Allows filtering by price range, with an option to specify exact price by setting min_price and max_price to the same value." />
      <item value="Categories help in narrowing down the search to a specific type of products." />
      <item value="on e-commerce platforms. If left empty, products from all categories will be considered." />
      <item value="Categories help in narrowing down the search to a specific type of products" />
      <item value="An optional string representing the category of the products to be filtered." />
      <item value="Products priced below this value will not be included in the search results." />
      <item value="The keyword to search for, which can be a product name, brand, or any relevant search term." />
      <item value="&quot;&quot;&quot;Runnable that manages chat message history for another Runnable.&#10;&#10;    A chat message history is a sequence of messages that represent a conversation.&#10;&#10;    RunnableWithMessageHistory wraps another Runnable and manages the chat message&#10;    history for it; it is responsible for reading and updating the chat message&#10;    history.&#10;&#10;    The formats supports for the inputs and outputs of the wrapped Runnable&#10;    are described below.&#10;&#10;    RunnableWithMessageHistory must always be called with a config that contains&#10;    the appropriate parameters for the chat message history factory.&#10;&#10;    By default the Runnable is expected to take a single configuration parameter&#10;    called `session_id` which is a string. This parameter is used to create a new&#10;    or look up an existing chat message history that matches the given session_id.&#10;&#10;    In this case, the invocation would look like this:&#10;&#10;    `with_history.invoke(..., config={&quot;configurable&quot;: {&quot;session_id&quot;: &quot;bar&quot;}})`&#10;    ; e.g., ``{&quot;configurable&quot;: {&quot;session_id&quot;: &quot;&lt;SESSION_ID&gt;&quot;}}``.&#10;&#10;    The configuration can be customized by passing in a list of&#10;    ``ConfigurableFieldSpec`` objects to the ``history_factory_config`` parameter (see&#10;    example below).&#10;&#10;    In the examples, we will use a chat message history with an in-memory&#10;    implementation to make it easy to experiment and see the results.&#10;&#10;    For production use cases, you will want to use a persistent implementation&#10;    of chat message history, such as ``RedisChatMessageHistory``.&#10;&#10;&#10;    Example: Chat message history with an in-memory implementation for testing." />
      <item value="input keys" />
      <item value="A single string input was passed in, but this chain expects &quot;&#10;                    f&quot;multiple inputs ({_input_keys}). When a chain expects &quot;&#10;                    f&quot;multiple inputs, please call it by passing in a dictionary, &quot;&#10;                    &quot;eg `chain({'foo': 1, 'bar': 2})`" />
      <item value="arbitrary" />
      <item value=" Memory refers to state in Chains. Memory can be used to store information about&#10;        past executions of a Chain and inject that information into the inputs of&#10;        future executions of the Chain. For example, for conversational Chains Memory&#10;        can be used to store conversations and automatically add them to future model&#10;        prompts so that the model has the necessary context to respond coherently to&#10;        the latest input.&#10;" />
      <item value=" This means that the sub-class has implemented an efficient add_messages&#10;             method, so we should use it." />
      <item value="   add_messages contains a default implementation that calls add_message&#10;    for each message in the sequence. This is provided for backwards compatibility&#10;    with existing implementations which only had add_message.&#10;&#10;    Async variants all have default implementations that call the sync variants.&#10;    Implementers can choose to over-ride the async implementations to provide&#10;    truly async implementations.&#10;&#10;    Usage guidelines:&#10;&#10;    When used for updating history, users should favor usage of `add_messages`&#10;    over `add_message` or other variants like `add_user_message` and `add_ai_message`&#10;    to avoid unnecessary round-trips to the underlying persistence layer.&#10;" />
      <item value=" Implementations guidelines:&#10;&#10;    Implementations are expected to over-ride all or some of the following methods:&#10;&#10;     add_messages: sync variant for bulk addition of messages&#10;     aadd_messages: async variant for bulk addition of messages&#10;     messages: sync variant for getting messages&#10;     aget_messages: async variant for getting messages&#10;     clear: sync variant for clearing messages&#10;     aclear: async variant for clearing messages" />
      <item value="Abstract base class for storing chat message history." />
      <item value="The number of messages returned by Zep and when the Zep server summarizes chat&#10;    histories is configurable. See the Zep documentation for more details." />
      <item value="Persist your chain history to the Zep MemoryStore." />
      <item value="scratchpad" />
      <item value="Prompt template that assumes variable is already list of messages." />
      <item value="The model name to pass to tiktoken when using this class. &#10;    Tiktoken is used to count the number of tokens in documents to constrain &#10;    them to be under a certain limit. By default, when set to None, this will &#10;    be the same as the embedding model name. However, there are some cases &#10;    where you may want to use this Embedding class with a model name not &#10;    supported by tiktoken. This can include when using Azure embeddings or &#10;    when using one of the many model providers that expose an OpenAI-like &#10;    API but with different models. In those cases, in order to avoid erroring &#10;    when tiktoken is called, you can specify a model name to use here." />
      <item value="vertical" />
      <item value="Fintech" />
      <item value="&quot;&quot;&quot; Represents an OAuth authorization object implementing the authorization code grant flow for use in a web application.&#10;&#10;    You can use an instance of this class as the AuthorizationData.Authentication property&#10;    of an :class:`.AuthorizationData` object to authenticate with Bing Ads services.&#10;    In this case the AuthenticationToken request header will be set to the corresponding OAuthTokens.AccessToken value.&#10;&#10;    This class implements the authorization code grant flow for Managing User Authentication with OAuth&#10;    documented at http:go.microsoft.comfwlink?LinkID=511609. This is a standard OAuth 2.0 flow and is defined in detail in the&#10;    Authorization Code Grant section of the OAuth 2.0 spec at https:tools.ietf.orghtmlrfc6749section-4.1.&#10;    For more information about registering a Bing Ads application, see http:go.microsoft.comfwlink?LinkID=511607." />
      <item value="&quot;&quot;&quot; Represents an OAuth authorization object implementing the authorization code grant flow for use in a desktop&#10;    or mobile application.&#10;&#10;    You can use an instance of this class as the AuthorizationData.Authentication property&#10;    of an :class:`.AuthorizationData` object to authenticate with Bing Ads services.&#10;    In this case the AuthenticationToken request header will be set to the corresponding OAuthTokens.AccessToken value.&#10;&#10;    This class implements the authorization code grant flow for Managing User Authentication with OAuth&#10;    documented at http:go.microsoft.comfwlink?LinkID=511609. This is a standard OAuth 2.0 flow and is defined in detail in the&#10;    Authorization Code Grant section of the OAuth 2.0 spec at https:tools.ietf.orghtmlrfc6749section-4.1.&#10;    For more information about registering a Bing Ads application, see http:go.microsoft.comfwlink?LinkID=511607." />
      <item value="  Bing Ads Campaign Management service operations require that if you specify a non-primitive,&#10;     it must be one of the values defined by the service i.e. it cannot be a nil element.&#10;     Since SUDS requires non-primitives and Bing Ads won't accept nil elements in place of an enum value,&#10;     you must either set the non-primitives or they must be set to None. Also in case new properties are added&#10;     in a future service release, it is a good practice to set each element of the SUDS object to None as a baseline." />
      <item value="This returns the value unchanged.  To the type checker this&#10;    signals that the return value has the designated type, but at&#10;    runtime we intentionally don't check anything (we want this&#10;    to be as fast as possible)." />
      <item value="The message output by the chat model." />
      <item value="SHOULD NOT BE SET DIRECTLY The text contents of the output message." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="431" />
        <entry key="ENGLISH" value="435" />
      </map>
    </option>
  </component>
</application>